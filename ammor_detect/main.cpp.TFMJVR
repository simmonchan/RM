#include <QTime>
#include <QDebug>
#include "camera_calibration.h"
#include "serialport.h"
#include "solvepnp.h"
#include "ammor_find.h"
#include "stereo_vision.h"
#include "RMVideoCapture.h"
#include "Header.h"

#include <utility>
#include <thread>
#include <chrono>
#include <functional>
#include <atomic>
#include <signal.h>

using namespace cv;
using namespace std;

//#define MONOCALUR

int stereo_detect()
{
     //set the port
    //SerialPort port;
    //port.initSerialPort();
    VisionData vision = {0,0,0,0,0};

    // open the camera and local the camera
    RMVideoCapture cap0("/dev/video1",3);
    if(cap0.fd!=-1){
        cap0.setVideoFormat(1280,720,1);
        cap0.setExposureTime(0, 100);
        cap0.startStream();
        cap0.info();
    }
    else{
        cap0.camnum = -1;
    }

    RMVideoCapture cap1("/dev/video2",3);
    if(cap1.fd!=-1){
        cap1.setVideoFormat(1280,720,1);
        cap1.setExposureTime(0,100);
        cap1.startStream();
        cap1.info();
    }
    else{
        cap1.camnum = -1;
    }
    RMVideoCapture cap_left,cap_right;
    bool camstatus[2] = {false,false};
    if(cap0.camnum == 1)
    {
        cap_left = cap0;
        camstatus[0] = true;
    }
    else if(cap1.camnum == 1)
    {
        cap_left = cap1;
        camstatus[0] = true;
    }
    else{
        camstatus[0] = false;
    }

    if(cap0.camnum == 2)
    {
        cap_right = cap0;
        camstatus[1] = true;
    }
    else if(cap1.camnum == 2)
    {
        cap_right = cap1;
        camstatus[1] = true;
    }
    else{
        camstatus[1] = false;
    }


    Ammor_find Armor_find_left;
    Ammor_find Armor_find_right;

    stereo_vision stereo;

    while(camstatus[0] && camstatus[1])
    {
        QTime time;
        time.start();

        Mat frame_left;
        Mat frame_right;

        cap_left >> frame_left;
        cap_right >> frame_right;

        if(frame_left.empty() && frame_right.empty())
        {
            cout << "no picture" << endl;
            continue;
        }

        imshow("left",frame_left);
        imshow("right",frame_right);

        Armor_find_left.detect(frame_left,BLUE_DETECT);
        Armor_find_right.detect(frame_right,BLUE_DETECT);

        vector<Point> Left_points;
        vector<Point> Right_points;

        vector<Armordata> Left_armor_data;
        vector<Armordata> Right_armor_data;

        if(Armor_find_left._flag && Armor_find_right._flag)
        {
            // get the data
            Left_points = Armor_find_left._ArmorPoints;
            Right_points = Armor_find_right._ArmorPoints;

            Left_armor_data = Armor_find_left._Armordatas;
            Right_armor_data = Armor_find_right._Armordatas;

            if(Left_points.size() == Right_points.size()){

                // sort the distance
                stereo.stereo_get_distance(Left_points,Right_points,Left_armor_data,Right_armor_data);
                sort(Left_armor_data.begin(), Left_armor_data.end(),
                     [](const Armordata & L1, const Armordata & L2) { return L1.distance < L2.distance;});

                sort(Right_armor_data.begin(), Right_armor_data.end(),
                     [](const Armordata & L1, const Armordata & L2) { return L1.distance < L2.distance;});

                //memory the last data
                Armor_find_left._LastArmor = Left_armor_data[0];
                Armor_find_right._LastArmor = Right_armor_data[0];

                // send the data
                Point final = (Left_armor_data[0].armor_center);
                vision = {(float)final.x,(float)final.y,Left_armor_data[0].distance,0,1};
                //port.TransformData(vision);
                //port.send();
            }

            else if(Left_points.size() > Right_points.size())
            {
                Left_points = Armor_find_left._ArmorPoints;
                Left_armor_data = Armor_find_left._Armordatas;

                // sort the distance
                stereo.monocular_get_distance(Left_armor_data,LEFT,Point(0,0));
                sort(Left_armor_data.begin(), Left_armor_data.end(),
                     [](const Armordata & L1, const Armordata & L2) { return L1.distance < L2.distance;});

                // memory the last data
                Armor_find_left._LastArmor = Left_armor_data[0];

                // send the data
                Point final = (Left_armor_data[0].armor_center);
                vision = {(float)final.x,(float)final.y,Left_armor_data[0].distance,0,1};
                //port.TransformData(vision);
                //port.send();


                Armor_find_left.clear();
                Armor_find_right.clear();
            }

            else{
                // get the data
                Right_points = Armor_find_right._ArmorPoints;
                Right_armor_data = Armor_find_right._Armordatas;

                // sort the distance
                stereo.monocular_get_distance(Right_armor_data,RIGHT,Point(0,0));
                sort(Right_armor_data.begin(), Right_armor_data.end(),
                     [](const Armordata & L1, const Armordata & L2) { return L1.distance < L2.distance;});

                // memory the last data
                Armor_find_right._LastArmor = Right_armor_data[0];

                // send the data
                Point final = (Right_armor_data[0].armor_center);
                vision = {(float)final.x,(float)final.y,Right_armor_data[0].distance,0,1};
                //port.TransformData(vision);
                //port.send();


                Armor_find_left.clear();
                Armor_find_right.clear();
            }


            Armor_find_left.clear();
            Armor_find_right.clear();
        }
        else if(Armor_find_left._flag){
            // get the data
            Left_points = Armor_find_left._ArmorPoints;
            Left_armor_data = Armor_find_left._Armordatas;

            // sort the distance
            stereo.monocular_get_distance(Left_armor_data,LEFT,Point(0,0));
            sort(Left_armor_data.begin(), Left_armor_data.end(),
                 [](const Armordata & L1, const Armordata & L2) { return L1.distance < L2.distance;});

            // memory the last data
            Armor_find_left._LastArmor = Left_armor_data[0];

            // send the data
            Point final = (Left_armor_data[0].armor_center);
            vision = {(float)final.x,(float)final.y,Left_armor_data[0].distance,0,1};
            //port.TransformData(vision);
            //port.send();


            Armor_find_left.clear();
            Armor_find_right.clear();
        }
        else if(Armor_find_right._flag){
            // get the data
            Right_points = Armor_find_right._ArmorPoints;
            Right_armor_data = Armor_find_right._Armordatas;

            // sort the distance
            stereo.monocular_get_distance(Right_armor_data,RIGHT,Point(0,0));
            sort(Right_armor_data.begin(), Right_armor_data.end(),
                 [](const Armordata & L1, const Armordata & L2) { return L1.distance < L2.distance;});

            // memory the last data
            Armor_find_right._LastArmor = Right_armor_data[0];

            // send the data
            Point final = (Right_armor_data[0].armor_center);
            vision = {(float)final.x,(float)final.y,Right_armor_data[0].distance,0,1};
            //port.TransformData(vision);
            //port.send();


            Armor_find_left.clear();
            Armor_find_right.clear();
        }
        else
        {
            vision = {0,0,0,0,0};
            //port.TransformData(vision);
            //port.send();
            Armor_find_left.clear();
            Armor_find_right.clear();
        }
        waitKey(1);
        qDebug()<<"time:"<<time.elapsed()<<"ms";
    }
    return 0;
}

#ifdef MONOCALUR
int detects()
{
    /************* 摄像头设置××××××××××××××*/
    RM_v4l2 v4l2("/dev/video0",10,100);
    VideoCapture camera(0);
    camera.set(CV_CAP_PROP_FRAME_WIDTH,1280);
    camera.set(CV_CAP_PROP_FRAME_HEIGHT,720);
    cout << "当前的分辨率为" << "1280*720" << endl;
    int fps = camera.get(CV_CAP_PROP_FPS);
    cout << "当前的帧率是：" << fps << endl;
    /************   串口设置******************/
    SerialPort port;
    port.initSerialPort();
    VisionData vision = {0,0,0,0,0};
    /***************主函数******************/
    Ammor_find Color;
    vector<Point> ArmorPoints;
    while(camera.isOpened())
    {
        QTime time;
        time.start(); // 计时间
        Mat frame;
        camera >> frame;
        if(frame.empty())
        {
            cout << "没有图片" << endl;
            continue;
        }
        int mode = GET_BLUE;
        //port.get_Mode(mode);
        switch (mode)
        {
            case(GET_NO):
                vision = {0,0,0,0,0};
                break;

            case(GET_RED):
            Color.detect(frame,RED_DETECT);
            ArmorPoints = Color._ArmorPoints;
            Color.clear();
            if(ArmorPoints.size() !=0)
            {
                vision = {(float)ArmorPoints[0].x,(float)ArmorPoints[0].y,0,0,1};
            }
            break;

            case(GET_BLUE):
            Color.detect(frame,BLUE_DETECT);
            ArmorPoints = Color._ArmorPoints;
            Color.clear();
            if(ArmorPoints.size() !=0)
            {
                vision = {(float)ArmorPoints[0].x,(float)ArmorPoints[0].y,0,0,1};
            }
            break;

            default:break;
        }
        port.TransformData(vision);
        port.send();

        imshow("原图",frame);
        waitKey(1);
        qDebug()<<"time:"<<time.elapsed()<<"ms";
    }
    return 0;
}
#endif

void GetImageThread(RMVideoCapture &cap,Mat &out){
    cap>>out;
}

int main()
{
    // open the camera and local the camera
    RMVideoCapture cap0("/dev/video1",3);
    if(cap0.fd!=-1){
        cap0.setVideoFormat(1280,720,1);
        cap0.setExposureTime(0, 10);
        cap0.startStream();
        cap0.info();
    }
    else{
        cap0.camnum = -1;
    }

    RMVideoCapture cap1("/dev/video2",3);
    if(cap1.fd!=-1){
        cap1.setVideoFormat(1280,720,1);
        cap1.setExposureTime(0,10);
        cap1.startStream();
        cap1.info();
    }
    else{
        cap1.camnum = -1;
    }
    RMVideoCapture cap_left,cap_right;
    bool camstatus[2] = {false,false};
    if(cap0.camnum == 1)
    {
        cap_left = cap0;
        camstatus[0] = true;
    }
    else if(cap1.camnum == 1)
    {
        cap_left = cap1;
        camstatus[0] = true;
    }
    else{
        camstatus[0] = false;
    }

    if(cap0.camnum == 2)
    {
        cap_right = cap0;
        camstatus[1] = true;
    }
    else if(cap1.camnum == 2)
    {
        cap_right = cap1;
        camstatus[1] = true;
    }
    else{
        camstatus[1] = false;
    }

    Ammor_find Armor_find_left;
    Ammor_find Armor_find_right;


    while(camstatus[0] && camstatus[1])
    {
        QTime time;
        time.start();

        Mat frame_left;
        Mat frame_right;

        thread th1(GetImageThread,ref(cap_left),ref(frame_left));
        thread th2(GetImageThread,ref(cap_right),ref(frame_right));

        th1.join();
        th2.join();

        thread p1(&Ammor_find::detect,&Armor_find_left,ref(frame_left),BLUE_DETECT);
        thread p2(&Ammor_find::detect,&Armor_find_right,ref(frame_right),BLUE_DETECT);

        p1.join();
        p2.join();

        Armor_find_left.clear();
        Armor_find_right.clear();

        qDebug()<<"time:"<<time.elapsed()<<"ms";
    }

}
